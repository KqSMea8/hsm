{"version":3,"sources":["../../../static/js/geohash.js"],"names":["GeoHash","BITS","BASE32","NEIGHBORS","right","even","left","top","bottom","BORDERS","odd","refine_interval","interval","cd","mask","calculateAdjacent","srcHash","dir","toLowerCase","lastChr","charAt","length","type","base","substring","indexOf","decodeGeoHash","geohash","is_even","lat","lon","lat_err","lon_err","i","c","j","latitude","longitude","encodeGeoHash","bit","ch","precision","mid"],"mappings":"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","file":"geohash.js","sourcesContent":["\r\nvar GeoHash = (function(){\r\n    function GeoHash(){}\r\n    var BITS = [16, 8, 4, 2, 1];\r\n\r\n    var BASE32 = \t\t\t\t\t\t\t\t\t\t\t   \"0123456789bcdefghjkmnpqrstuvwxyz\";\r\n    var NEIGHBORS = { right  : { even :  \"bc01fg45238967deuvhjyznpkmstqrwx\" },\r\n        left   : { even :  \"238967debc01fg45kmstqrwxuvhjyznp\" },\r\n        top    : { even :  \"p0r21436x8zb9dcf5h7kjnmqesgutwvy\" },\r\n        bottom : { even :  \"14365h7k9dcfesgujnmqp0r2twvyx8zb\" } };\r\n    var BORDERS   = { right  : { even : \"bcfguvyz\" },\r\n        left   : { even : \"0145hjnp\" },\r\n        top    : { even : \"prxz\" },\r\n        bottom : { even : \"028b\" } };\r\n\r\n    NEIGHBORS.bottom.odd = NEIGHBORS.left.even;\r\n    NEIGHBORS.top.odd = NEIGHBORS.right.even;\r\n    NEIGHBORS.left.odd = NEIGHBORS.bottom.even;\r\n    NEIGHBORS.right.odd = NEIGHBORS.top.even;\r\n    BORDERS.bottom.odd = BORDERS.left.even;\r\n    BORDERS.top.odd = BORDERS.right.even;\r\n    BORDERS.left.odd = BORDERS.bottom.even;\r\n    BORDERS.right.odd = BORDERS.top.even;\r\n\r\n    function refine_interval(interval, cd, mask) {\r\n        if (cd&mask)\r\n            interval[0] = (interval[0] + interval[1])/2;\r\n        else\r\n            interval[1] = (interval[0] + interval[1])/2;\r\n    }\r\n\r\n    function calculateAdjacent(srcHash, dir) {\r\n        srcHash = srcHash.toLowerCase();\r\n        var lastChr = srcHash.charAt(srcHash.length-1);\r\n        var type = (srcHash.length % 2) ? 'odd' : 'even';\r\n        var base = srcHash.substring(0,srcHash.length-1);\r\n        if (BORDERS[dir][type].indexOf(lastChr)!=-1)\r\n            base = calculateAdjacent(base, dir);\r\n        return base + BASE32[NEIGHBORS[dir][type].indexOf(lastChr)];\r\n    };\r\n    GeoHash.decodeGeoHash = function (geohash) {\r\n        var is_even = 1;\r\n        var lat = []; var lon = [];\r\n        lat[0] = -90.0;  lat[1] = 90.0;\r\n        lon[0] = -180.0; lon[1] = 180.0;\r\n        var lat_err = 90.0;  var lon_err = 180.0;\r\n\r\n        for (i=0; i<geohash.length; i++) {\r\n            var c = geohash[i];\r\n            var cd = BASE32.indexOf(c);\r\n            for (var j=0; j<5; j++) {\r\n                var mask = BITS[j];\r\n                if (is_even) {\r\n                    lon_err /= 2;\r\n                    refine_interval(lon, cd, mask);\r\n                } else {\r\n                    lat_err /= 2;\r\n                    refine_interval(lat, cd, mask);\r\n                }\r\n                is_even = !is_even;\r\n            }\r\n        }\r\n        lat[2] = (lat[0] + lat[1])/2;\r\n        lon[2] = (lon[0] + lon[1])/2;\r\n\r\n        return { latitude: lat, longitude: lon};\r\n    }\r\n\r\n    GeoHash.encodeGeoHash = function (latitude, longitude) {\r\n        var is_even=1;\r\n        var i=0;\r\n        var lat = []; var lon = [];\r\n        var bit=0;\r\n        var ch=0;\r\n        var precision = 12;\r\n        var geohash = \"\";\r\n\r\n        lat[0] = -90.0;  lat[1] = 90.0;\r\n        lon[0] = -180.0; lon[1] = 180.0;\r\n\r\n        while (geohash.length < precision) {\r\n            if (is_even) {\r\n                var mid = (lon[0] + lon[1]) / 2;\r\n                if (longitude > mid) {\r\n                    ch |= BITS[bit];\r\n                    lon[0] = mid;\r\n                } else\r\n                    lon[1] = mid;\r\n            } else {\r\n                mid = (lat[0] + lat[1]) / 2;\r\n                if (latitude > mid) {\r\n                    ch |= BITS[bit];\r\n                    lat[0] = mid;\r\n                } else\r\n                    lat[1] = mid;\r\n            }\r\n\r\n            is_even = !is_even;\r\n            if (bit < 4)\r\n                bit++;\r\n            else {\r\n                geohash += BASE32[ch];\r\n                bit = 0;\r\n                ch = 0;\r\n            }\r\n        }\r\n        return geohash;\r\n    }\r\n}());\r\n"]}